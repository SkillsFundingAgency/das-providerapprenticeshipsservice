@using SFA.DAS.ProviderApprenticeshipsService.Application.Domain.Commitment
@using SFA.DAS.ProviderApprenticeshipsService.Application.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models
@using SFA.DAS.ProviderApprenticeshipsService.Web.Validation.Text
@using SFA.DAS.ProviderUrlHelper.Framework
@model CommitmentDetailsViewModel

@{
    ViewBag.Title = "Review your cohort";
    ViewBag.PageId = "apprentice-details";
}

<div id="cohort-details">
    <div class="grid-row">
        <div class="column-full">

            @if (Model.Errors.Any())
            {
                <div class="validation-summary-errors error-summary">
                    <h1 id="error-summary" class="heading-medium error-summary-heading">
                        There are errors on this page that need your attention
                    </h1>
                    <ul class="error-summary-list">
                        @foreach (var errorMsg in Model.Errors)
                        {
                            <li>
                                <a href="#error-message-@errorMsg.Key" data-focuses="error-message-@errorMsg.Key">
                                    @ValidationMessage.ExtractBannerMessage(errorMsg.Value)
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
            else if (Model.Warnings.Any())
            {
                <div class="validation-summary-max-funding error-summary">
                    <h1 id="warning-summary" class="heading-medium warning-summary-heading">
                        Warnings for your attention
                    </h1>
                    <ul class="max-funding-summary-list">
                        @foreach (var warning in Model.Warnings)
                        {
                            <li>
                                <a href="#max-funding-group-@warning.Key" data-focuses="max-funding-group-@warning.Key">
                                    @warning.Value
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }

        

            @if (Model.IsReadOnly)
            {
                <h1 class="heading-xlarge">View your cohort</h1>
            }
            else
            {
                <h1 class="heading-xlarge">Review your cohort</h1>
            }

        </div>
    </div>

    <div class="grid-row" id="review-cohorts">
        <div class="column-one-third all-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Apprenticeships.Count</h2>
                <p class="heading-small">@_addS("Apprentice", Model.Apprenticeships.Count)</p>
            </div>
        </div>
        <div class="column-one-third incomplete-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Apprenticeships.Count(x => !x.CanBeApproved)</h2>
                <p class="heading-small">Incomplete @_addS("record", Model.Apprenticeships.Count(x => !x.CanBeApproved))</p>
            </div>
        </div>
        <div class="column-one-third total-cost">
            <div class="dynamic-cost-display">
                @{
                    var totalCost = Model.Apprenticeships.Sum(x => x.Cost ?? 0).ToString("N0");

                    var totalClass = string.Empty;

                    if (totalCost.Length > 3)
                    {
                        totalClass = "short";
                    }
                    if (totalCost.Length > 6)
                    {
                        totalClass = "long";
                    }
                    if (totalCost.Length > 9)
                    {
                        totalClass = "longer";
                    }

                }
                <h2 class="@totalClass bold-xlarge">&pound;@totalCost</h2>
                <p class="heading-small">Total cost</p>
            </div>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-one-third employer-details">
            <p><span class="strong">Employer: </span>@Model.LegalEntityName</p>
            <p><span class="strong">Cohort reference: </span>@Model.Reference</p>
            <p><span class="strong">Status: </span>@Model.Status.GetDescription()</p>
        </div>

        <div class="column-two-thirds employer-details">
            <p class="strong">Message:</p>
            <p>@(string.IsNullOrWhiteSpace(Model.LatestMessage) ? "No message added" : Model.LatestMessage)</p>
        </div>
    </div>

    @if (Model.Status == RequestStatus.RejectedBySender)
    {
        <div class="grid-row">
            <div class="column-full">
                <div class="panel panel-border-narrow">
                    <p>The funding employer has rejected the transfer request for this cohort. </p>
                    <p>You should contact the apprentices' employer to discuss what steps to take next.</p>
                </div>            
             </div>
        </div>

    }

    <hr class="hr-bottom">

    @if (!Model.IsReadOnly)
    {
        <div class="grid-row">
            <div class="column-full bulk-upload-buttons">

                @{ var finishEditingText = Model.PendingChanges ? "Save and continue" : "Continue to approval"; }
                <a class="button finishEditingBtn" href="@Url.Action("FinishEditing")" aria-label="@finishEditingText">@finishEditingText</a>
                
                @if (!Model.IsLinkedToChangeOfPartyRequest)
                {
                    <a href="@Url.Action("AddApprentice", new {Model.ProviderId, Model.HashedCommitmentId})" class="button button-secondary add-app-btn" aria-label="Add an apprentice">Add an apprentice</a>
                }
                
                @if (Model.IsAutoReservationEnabled && !Model.IsLinkedToChangeOfPartyRequest)
                {
                    <a href="@Url.Action("UploadApprenticeships", "BulkUpload", new {Model.ProviderId, Model.HashedCommitmentId})" class="button button-secondary upload-btn" aria-label="Bulk upload apprentices">Bulk upload apprentices</a>
                }
                <hr class="hr-bottom">
            </div>
        </div>
    }

    <div class="grid-row">
        <div class="column-full">
            @if (!Model.HasApprenticeships)
            {
                <div class="panel panel-border-wide alert-default">

                    @if (Model.IsReadOnly)
                    {
                        <p>Apprentices will appear here when the employer adds them to your cohort.</p>
                    }
                    else
                    {
                        <p>
                            You haven’t added any apprentices yet - <a href="@Url.Action("AddApprentice", new {Model.ProviderId, Model.HashedCommitmentId})">add an apprentice</a>.
                        </p>
                    }

                </div>
            }
        </div>
    </div>

    @if (Model.Apprenticeships.Count > 0)
    {
        <div class="grid-row">
            <div class="column-full">

                @foreach (var group in Model.ApprenticeshipGroups)
                {
                    var groupTitle = String.Format($"{group.Apprenticeships.Count} x {group.GroupName}");

                    <div class="group-header">

                        <h3 class="heading-medium group-title">@groupTitle</h3>
                        @if (group.TrainingProgramme != null)
                        {
                            <p>Training code: @group.TrainingProgramme.Id</p>
                        }

                        @if (group.OverlapErrorCount > 0 )
                        {
                            <div class="overlap-notification" id="error-message-@group.GroupId">
                                <p class="heading-small">
                                    @_addS("Apprenticeship", group.OverlapErrorCount) can't have overlapping training dates
                                </p>
                                <p>
                                   Please update training dates to ensure they do not overlap.
                                </p>
                            </div>
                        }
                        else if (group.ApprenticeshipsOverFundingLimit > 0 && !Model.Errors.Any())
                        {

                            <div class="funding-cap-notification" id="max-funding-group-@group.GroupId">
                                <p class="heading-small">
                                    @($"{group.ApprenticeshipsOverFundingLimit} {_addS("apprenticeship", group.ApprenticeshipsOverFundingLimit)} above funding band maximum")
                                </p>
                                <p>
                                    The costs are above the@(group.ShowCommonFundingCap ? $" £{group.CommonFundingCap:N0}" : "") <a target="_blank" href="https://www.gov.uk/government/publications/apprenticeship-funding-and-performance-management-rules-2017-to-2018">maximum value of the funding band</a> for this apprenticeship. You'll need to ask the employer to pay the difference directly to you - this can't be funded from their account.
                                </p>
                            </div>
                          }
                            </div>

                    <table class="tableResponsive providerList">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Unique learner number</th>
                                <th scope="col">Date of birth</th>
                                <th scope="col">Training dates</th>
                                <th scope="col" colspan="2">Cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var apprenticeship in group.Apprenticeships.OrderBy(a => a.CanBeApproved))
                            {
                                <tr>
                                    <td>@GetValueOrDefault(apprenticeship.ApprenticeshipName)</td>
                                    <td>@GetValueOrDefault(apprenticeship.ULN)</td>
                                    <td>
                                        @if (apprenticeship.ApprenticeDateOfBirth.HasValue)
                                        {
                                            <span>
                                                @apprenticeship.ApprenticeDateOfBirth.Value.ToGdsFormat()
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="missing">&ndash;</span>
                                        }
                                    </td>
                                    @if (apprenticeship.StartDate != null && apprenticeship.EndDate != null)
                                    {
                                        if (apprenticeship.OverlappingApprenticeships.Any())
                                        {
                                            <td class="overlap-alert">
                                                <a href="#error-message-@group.GroupId"
                                                   aria-label="The unique learner number already exists for these training dates"
                                                   aria-describedby="max-funding-group-@group.GroupId"
                                                   title="The unique learner number already exists for these training dates">
                                                    @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay() &nbsp;
                                                </a>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay() &nbsp;
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td>
                                            <span class="missing">&ndash;</span>
                                        </td>
                                    }
                                    
                                    @* if the user hasn't entered a startdate, cost and training programme yet, we don't show any error relating to band cap for that apprenticeship *@
                                    @if (apprenticeship.IsOverFundingLimit(group.TrainingProgramme)
                                         && !Model.Errors.Any())
                                    {
                                        <td class="funding-cap-alert">
                                            <a href="#max-funding-group-@group.GroupId" aria-label="Cost is above the maximum funding band" aria-describedby="max-funding-group-@group.GroupId" title="Cost is above the maximum funding band">@FormatCost(apprenticeship.Cost)</a>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            @GetValueOrDefault(FormatCost(apprenticeship.Cost))
                                        </td>
                                    }

                                    <td>
                                        @if (Model.IsReadOnly)
                                        {
                                            <a href="@Url.Action("View", new {Model.HashedCommitmentId, apprenticeship.HashedApprenticeshipId})"
                                               title="View @apprenticeship.ApprenticeshipName" aria-label="View @apprenticeship.ApprenticeshipName">View</a>
                                        }
                                        else
                                        {
                                            <a  href="@Url.ProviderCommitmentsLink($"{Model.ProviderId}/unapproved/{Model.HashedCommitmentId}/apprentices/{apprenticeship.HashedApprenticeshipId}/edit")"
                                               title="Edit @apprenticeship.ApprenticeshipName" aria-label="Edit @apprenticeship.ApprenticeshipName">Edit</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }

    @if (!Model.IsReadOnly)
    {
        <a class="button delete-button" href="@Url.Action("DeleteCohort", new { Model.ProviderId, Model.HashedCommitmentId })" aria-label="Delete">Delete cohort</a>
    }

    @section breadcrumb {
        <div class="breadcrumbs">
            <a href="@Model.BackLinkUrl" aria-label="Back" class="back-link">Back</a>
        </div>
    }

</div>


@functions {
    public string FormatCost(decimal? cost)
    {
        return !cost.HasValue
            ? string.Empty
            : $"£{cost.Value:n0}";
    }

    readonly Func<string, int, string> _addS = (word, count) => count == 1 ? word : $"{word}s";
}

@helper GetValueOrDefault(string property)
{
if (!string.IsNullOrEmpty(property))
{
        <span>@property &nbsp;</span>
}
else
{
        <span class="missing">@Html.Raw("&ndash;")</span>
}
}
