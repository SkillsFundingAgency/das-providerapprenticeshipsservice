@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models
@model CommitmentDetailsViewModel

@{
    ViewBag.Title = "Review your cohort";
    ViewBag.PageId = "apprentice-details";
}

<div id="cohort-details">
    <div class="grid-row">
        <div class="column-full">
            @if (Model.HasOverlappingErrors)
            {
                @Html.Partial("ValidationSummary", Html.ViewData.ModelState)
            }
            else if (Model.FundingCapWarnings.Any())
            {
                <div class="validation-summary-max-funding error-summary">
                    <h1 id="warning-summary" class="heading-medium warning-summary-heading">
                        Warnings for your attention
                    </h1>
                    <p>Review the following details:</p>
                    <ul class="max-funding-summary-list">
                        @foreach (var warning in Model.FundingCapWarnings)
                {
                            <li>
                                <a href="#max-funding-group-@warning.Key" data-focuses="max-funding-group-@warning.Key">
                                    @warning.Value
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
            <h1 class="heading-xlarge">Review your cohort</h1>
        </div>
    </div>

    <div class="grid-row" id="review-cohorts">
        <div class="column-one-third all-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Apprenticeships.Count</h2>
                <p class="heading-small">@_addS("Apprentice", Model.Apprenticeships.Count)</p>
            </div>
        </div>
        <div class="column-one-third incomplete-apps">
            <div>
                <h2 class="bold-xlarge">@Model.Apprenticeships.Count(x => !x.CanBeApprove)</h2>
                <p class="heading-small">Incomplete @_addS("record", Model.Apprenticeships.Count(x => !x.CanBeApprove))</p>
            </div>
        </div>
        <div class="column-one-third total-cost">
            <div>
                <h2 class="bold-xlarge">&pound;@Model.Apprenticeships.Sum(x => x.Cost ?? 0).ToString("N0")</h2>
                <p class="heading-small">Total cost</p>
            </div>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-one-half employer-details">
            <p><span class="strong">Employer: </span>@Model.LegalEntityName</p>
            <p><span class="strong">Cohort reference: </span>@Model.Reference</p>
            <p><span class="strong">Status: </span>@Model.Status.GetDescription()</p>
        </div>

        <div class="column-one-half employer-details">
            <p class="strong">Message:</p>
            <p>@(string.IsNullOrWhiteSpace(Model.LatestMessage) ? "No message added" : Model.LatestMessage)</p>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-full bulk-upload-buttons">
            <hr class="hr-top">

            @{ var finishEditingText = Model.PendingChanges ? "Save and continue" : "Continue to approval"; }
            <a class="button finishEditingBtn" href="@Url.Action("FinishEditing")" aria-label="@finishEditingText">@finishEditingText</a>
            <a href="@Url.Action("Create", new { Model.ProviderId, Model.HashedCommitmentId })" class="button button-secondary" aria-label="Add an apprentice">Add an apprentice</a>
            <a href="@Url.Action("UploadApprenticeships", "BulkUpload", new { Model.ProviderId, Model.HashedCommitmentId })" class="button button-secondary upload-btn" aria-label="Bulk upload apprentices">Bulk upload apprentices</a>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-full">
            @if (!Model.HasApprenticeships)
            {
                <div class="panel panel-border-wide alert-default">
                    <p>You haven’t added any apprentices yet - <a href="@Url.Action("Create", new { Model.ProviderId, Model.HashedCommitmentId })">add an apprentice</a>.</p>
                </div>
            }
        </div>
    </div>

    @if (Model.Apprenticeships.Count > 0)
    {
        <div class="grid-row">
            <div class="column-full">

                @foreach (var group in Model.ApprenticeshipGroups)
                {
                    var groupTitle = String.Format($"{group.Apprenticeships.Count} x {group.GroupName}");



                    <div class="group-header">

                        <h3 class="heading-medium group-title">@groupTitle</h3>
                        @if (group.TrainingProgramme != null)
                        {
                            <p>Training code: @group.TrainingProgramme.Id</p>
                        }

                        @if (group.ShowOverlapError)
                        {
                            <div class="overlap-notification grey-background" id="error-message-@group.GroupId">
                                <p class="heading-medium">
                                    @group.OverlapErrorCount @_addS("Apprenticeship", group.OverlapErrorCount) with overlapping training dates
                                </p>
                                <p>
                                    These apprentices already have records with overlapping training dates in the apprenticeship service.
                                    Please check the details are correct. If you're unsure, contact the employer in the first instance.
                                </p>
                            </div>
                            <i class="overlap-arrow"></i>
                        }
                        else if (group.ShowFundingLimitWarning && !Model.HasOverlappingErrors)
                        {
                            <div class="funding-cap-notification" id="max-funding-group-@group.GroupId">
                                <p class="heading-small">
                                    @($"{group.ApprenticeshipsOverFundingLimit} {_addS("apprenticeship", group.ApprenticeshipsOverFundingLimit)} above funding band maximum")
                                </p>
                                <p>
                                    The costs are above the £@group.TrainingProgramme.MaxFunding.ToString("N0") <a target="_blank" href="https://www.gov.uk/government/publications/apprenticeship-funding-and-performance-management-rules-2017-to-2018">maximum value of the funding band</a> for this apprenticeship. You'll need to ask the employer to pay the difference directly to you - this can't be funded from their account.
                                </p>
                            </div>
                            <i class="bubble-arrow"></i>
                        }
                    </div>

                    <table class="tableResponsive providerList">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Unique learner number</th>
                                <th scope="col">Date of birth</th>
                                <th scope="col">Training dates</th>
                                <th scope="col" colspan="2">Cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var apprenticeship in group.Apprenticeships.OrderBy(a => a.CanBeApprove))
                            {
                                <tr>
                                    <td>@GetValueOrDefault(apprenticeship.ApprenticeshipName)</td>
                                    <td>@GetValueOrDefault(apprenticeship.ULN)</td>
                                    <td>
                                        @if (apprenticeship.ApprenticeDateOfBirth.HasValue)
                                        {
                                            <span>
                                                @apprenticeship.ApprenticeDateOfBirth.Value.ToGdsFormat()
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="missing">&ndash;</span>
                                        }
                                    </td>
                                    @if (apprenticeship.StartDate != null && apprenticeship.EndDate != null)
                                    {
                                        if (apprenticeship.OverlappingApprenticeships.Any())
                                        {
                                            <td class="overlap-alert">
                                                <a href="#error-message-@group.GroupId"
                                                   aria-label="The unique learner number already exists for these training dates"
                                                   aria-describedby="max-funding-group-@group.GroupId"
                                                   title="The unique learner number already exists for these training dates">
                                                    @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay() &nbsp;
                                                </a>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay() &nbsp;
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td>
                                            <span class="missing">&ndash;</span>
                                        </td>
                                    }
                                    @if (group.TrainingProgramme != null && apprenticeship.Cost.HasValue && apprenticeship.Cost > group.TrainingProgramme.MaxFunding && !Model.HasOverlappingErrors)
                                    {
                                        <td class="funding-cap-alert">
                                            <a href="#max-funding-group-@group.GroupId" aria-label="Cost is above the maximum funding band" aria-describedby="max-funding-group-@group.GroupId" title="Cost is above the maximum funding band">@FormatCost(apprenticeship.Cost)</a>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            @GetValueOrDefault(FormatCost(apprenticeship.Cost))
                                        </td>
                                    }

                                    <td>
                                        <a href="@Url.Action("Edit", new { Model.HashedCommitmentId, apprenticeship.HashedApprenticeshipId })"
                                           title="Edit @apprenticeship.ApprenticeshipName" aria-label="Edit @apprenticeship.ApprenticeshipName">Edit</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                }

            </div>
        </div>
    }

    <a class="button delete-button" href="@Url.Action("DeleteCohort", new { Model.ProviderId, Model.HashedCommitmentId })" aria-label="Delete">Delete cohort</a>

    @section breadcrumb {
        <div class="breadcrumbs">
            <a href="@Model.BackLinkUrl" aria-label="Back" class="back-link">Back</a>
        </div>
    }

</div>


@functions {
    public string FormatCost(decimal? cost)
    {
        return !cost.HasValue
            ? string.Empty
            : $"£{cost.Value:n0}";
    }

    readonly Func<string, int, string> _addS = (word, count) => count == 1 ? word : $"{word}s";
}

@helper GetValueOrDefault(string property)
{
    if (!string.IsNullOrEmpty(property))
    {
            <span>@property &nbsp;</span>
    }
    else
    {
            <span class="missing">@Html.Raw("&ndash;")</span>
    }
}