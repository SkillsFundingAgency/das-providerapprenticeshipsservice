@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models

@model ApprenticeshipViewModel

@{
    ViewBag.Title = "Edit an apprentice";
    ViewBag.PageId = "edit-apprentice";
}

@section pageSpecificJS {
    @Scripts.Render("~/bundles/apprentice")
}

<div class="grid-row">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">Edit apprentice details</h1>

        <div class="panel panel-border-wide add-edit-desc">
            <p>You must add the apprentice’s first and last names - fill in as many other fields as you can. You'll be able to return later to make changes or add more information.    </p>
            <p>You can only receive payments for this apprentice if:</p>
            <ul class="list list-bullet">
                <li>all the fields have been completed - either by yourself or the employer</li>
                <li>the data matches the individualised learner record (ILR) data you send us</li>
            </ul>
        </div>
        <hr />
     </div>
  </div>


        <div class="grid-row">
            <div class="column-two-thirds">

                <form method="POST" action="@Url.Action("Edit")" novalidate="novalidate">
                    @Html.Partial("ValidationSummary", Html.ViewData.ModelState)
                    @Html.AntiForgeryToken()
       
                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.FirstName, "error")">

                        @Html.LabelFor(m => m.FirstName, "First name", new { @class = "form-label form-label-bold" })
                        @Html.ValidationMessageFor(m => m.FirstName, null, new { id = "error-message-" + Html.IdFor(m => m.FirstName) })
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control form-control-3-4" })
                    </div>
                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.LastName, "error")">
                        @Html.LabelFor(m => m.LastName, "Last name", new { @class = "form-label form-label-bold" })
                        @Html.ValidationMessageFor(m => m.LastName, null, new { id = "error-message-" + Html.IdFor(m => m.LastName) })
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control form-control-3-4" })
                    </div>

                    <div class="form-error-group form-group @Html.AddClassIfPropertyInError(x => x.DateOfBirth, "error") ">
                        <hr />
                        <span class="form-label-bold">Date of birth</span>
                        <span class="form-hint">For example, 08 12 2001</span>

                        <div class="form-date">
                            @Html.ValidationMessageFor(m => m.DateOfBirth, null, new { id = "error-message-" + Html.IdFor(m => m.DateOfBirth), @class = "error-message" })

                            <div class="form-group form-group-day">
                                <label for="@Html.IdFor(m => m.DateOfBirth.Day)">
                                    Day
                                </label>
                                @Html.TextBoxFor(m => m.DateOfBirth.Day, new { @class = "form-control", type = "number", aria_labelledby = Html.IdFor(m => m.DateOfBirth.Day) })
                            </div>
                            <div class="form-group form-group-month">
                                <label for="@Html.IdFor(m => m.DateOfBirth.Month)">
                                    Month
                                </label>
                                @Html.TextBoxFor(m => m.DateOfBirth.Month, new { @class = "form-control", type = "number", aria_labelledby = Html.IdFor(m => m.DateOfBirth.Month) })
                            </div>
                            <div class="form-group form-group-year">
                                <label for="@Html.IdFor(m => m.DateOfBirth.Year)">
                                    Year
                                </label>
                                <input aria-labelledby="@Html.IdFor(m => m.DateOfBirth.Year)" class="form-control" data-val="true" data-val-number="The field Year must be a number." id="@Html.IdFor(m => m.DateOfBirth.Year)" name="DateOfBirth.Year" type="number" value="@Model.DateOfBirth.Year">
                            </div>
                        </div>
                    </div>

                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.ULN, "error")">
                        <hr />
                        <label for="@Html.IdFor(m => m.ULN)">
                            <span class="form-label form-label-bold">Unique learner number</span>
                            @Html.ValidationMessageFor(m => m.ULN, null, new { id = "error-message-" + Html.IdFor(m => m.ULN), @class = "error-message" })
                        </label>
                        @Html.TextBoxFor(m => m.ULN, new { @class = "form-control form-control-3-4", type = "number", aria_labelledby = Html.IdFor(m => m.ULN) })
                    </div>

                    <div class="form-group">
                        <hr />
                        <label class="form-label-bold" for="TrainingCode">Apprenticeship training course</label>
                        <span class="form-hint">Start typing in the name of the course or choose an option from the list</span>
                        <select name="TrainingCode" id="TrainingCode" class="form-control form-control-3-4" aria-label="Apprenticeship training course">
                            <option value="">Please select</option>
                            @foreach (var programme in ViewBag.ApprenticeshipProgrammes)
                            {
                                <option value="@programme.Id" @if (programme.Id.ToString() == Model.TrainingCode) { @Html.Raw("selected")  }>

                                    @programme.Title
                                </option>
                            }
                        </select>
                    </div>

                    <div class="form-error-group form-group @Html.AddClassIfPropertyInError(x => x.StartDate, "error") @Html.AddClassIfPropertyInError(x => x.StartDate, "error") @Html.AddClassIfPropertyInError("StartDateOverlap", "error")">
                        <fieldset>
                            <legend>
                                <span class="form-label-bold">Planned training start date</span>
                                <span class="form-hint">For example, 09 2017</span>
                            </legend>
                            <div class="form-date">
                                @Html.ValidationMessageFor(m => m.StartDate, null, new { id = "error-message-" + Html.IdFor(m => m.StartDate), @class = "error-message" })
                                @Html.ValidationMessage("StartDateOverlap",
                        "The date overlaps with existing training dates for the same apprentice. " +
                            "Please check the date - contact the employer for help.",
                        new { id = "error-message-StartDateOverlap", @class = "error-message" })
                                <div class="form-group form-group-month">
                                    <label for="@Html.IdFor(m => m.StartDate.Month)">
                                        <span class="form-label-bold">Month</span>
                                    </label>
                                    @Html.TextBoxFor(m => m.StartDate.Month, new { @class = "form-control", type = "number", aria_labelledby = Html.IdFor(m => m.StartDate.Month) })
                                </div>
                                <div class="form-group form-group-month">
                                    <label for="@Html.IdFor(m => m.StartDate)">
                                        <span class="form-label-bold">Year</span>
                                    </label>
                                    <input aria-labelledby="StartDate" class="form-control" data-val="true" data-val-number="The field Year must be a number." id="@Html.IdFor(m => m.StartDate.Year)" name="@Html.NameFor(m => m.StartDate.Year)" type="number" value="@Model.StartDate.Year">
                                </div>
                            </div>
                        </fieldset>
                    </div>

                    <div class="form-error-group form-group @Html.AddClassIfPropertyInError(x => x.EndDate, "error") @Html.AddClassIfPropertyInError("EndDateOverlap", "error")">
                        <fieldset>
                            <legend>
                                <span class="form-label-bold">Projected finish date</span>
                                <span class="form-hint">For example, 02 2019</span>
                            </legend>
                            <div class="form-date">
                                @Html.ValidationMessageFor(m => m.EndDate, null, new { id = "error-message-" + Html.IdFor(m => m.EndDate), @class = "error-message" })
                                @Html.ValidationMessage("EndDateOverlap",
                            "The date overlaps with existing training dates for the same apprentice. " +
                                "Please check the date - contact the employer for help.",
                            new { id = "error-message-EndDateOverlap", @class = "error-message" })
                                <div class="form-group form-group-month">
                                    <label for="@Html.IdFor(m => m.EndDate.Month)">
                                        <span class="form-label-bold">Month</span>
                                    </label>
                                    @Html.TextBoxFor(m => m.EndDate.Month, new { @class = "form-control", type = "number", aria_labelledby = Html.IdFor(m => m.EndDate.Month) })
                                </div>
                                <div class="form-group form-group-month">
                                    <label for="@Html.IdFor(m => m.EndDate.Year)">
                                        <span class="form-label-bold">Year</span>
                                    </label>
                                    <input aria-labelledby="EndDate" class="form-control" data-val="true" data-val-number="The field Year must be a number." id="@Html.IdFor(m => m.EndDate.Year)" name="@Html.NameFor(m => m.EndDate.Year)" type="number" value="@Model.EndDate.Year">
                                </div>
                            </div>
                        </fieldset>
                    </div>

                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.Cost, "error")">
                        <hr />
                        <label for="@Html.IdFor(m => m.Cost)">
                            <span class="form-label-bold">Total agreed apprenticeship price (excluding VAT)</span>
                            <span class="form-hint">Enter the price, including any end-point assessment costs, in whole pounds. For example, for £1,500 enter 1500.</span>
                            @Html.ValidationMessageFor(m => m.Cost, "Enter the cost in whole pounds, without a £ symbol", new { id = "error-message-" + Html.IdFor(m => m.Cost), @class = "error-message" })
                        </label>
                        <span class="heading-small">£ </span>@Html.TextBoxFor(m => m.Cost, new { @class = "form-control form-control-3-4", type = "text", aria_labelledby = Html.IdFor(m => m.Cost) })
                    </div>

                    <div class="form-group @Html.AddClassIfPropertyInError(x => x.ProviderRef, "error")">
                        @Html.LabelFor(m => m.ProviderRef, "Reference (optional)", new { @class = "form-label-bold" })
                        <span class="form-hint">Add a reference, such as employee number or location - this won’t be seen by the employer</span>
                        @Html.ValidationMessageFor(m => m.ProviderRef, null, new { id = "error-message-" + Html.IdFor(m => m.ProviderRef) })
                        @Html.TextBoxFor(m => m.ProviderRef, new { @class = "form-control form-control-3-4" })
                        <p id="charCount-noJS">Enter upto a maximum of 20 characters</p>
                        <p id="charCount" style="display:none;"><span name="countchars" id="countchars"></span> characters remaining</p>
                    </div>

                    @Html.Partial("EditApprenticeship", Model)

                    <div class="form-group">
                        <hr />
                        <div class="grey-background">
                            <p class="form-label-bold">End-point assessments</p>
                            <p>For apprenticeship standards, we'll contact employers to ask them to add details of their chosen <a href="https://www.gov.uk/government/publications/using-the-register-of-apprentice-assessment-organisations" target="_blank" title="Opens in a new window">end-point assessment organisation</a>. We’ll do this before the final gateway stage of the apprenticeship.</p>
                        </div>
                    </div>

                    <button type="submit" class="button">Save</button>
                    <a class="button delete-button" href="@Url.Action("DeleteConfirmation", new { Model.HashedCommitmentId, Model.HashedApprenticeshipId })" aria-label="Cancel">Delete</a>

                    <a class="links" href="@Url.Action("Details", new { Model.HashedCommitmentId })" aria-label="Cancel">Cancel</a>

                </form>
            </div>
        </div>

        @section breadcrumb {
            <div class="breadcrumbs">
                <a href="@Url.Action("Details", new { Model.HashedCommitmentId })" aria-label="Back" class="back-link">Back</a>
            </div>
        }
