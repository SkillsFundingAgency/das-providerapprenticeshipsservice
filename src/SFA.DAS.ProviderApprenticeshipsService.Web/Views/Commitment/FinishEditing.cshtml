@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models.Types
@model FinishEditingViewModel

@{
    ViewBag.Title = "Finish editing";
    ViewBag.PageId = "finish-editing";
}

<div class="grid-row">
    <div class="column-two-thirds">

        @if (!Model.ReadyForApproval || !Model.HasSignedTheAgreement || Model.HasOverlappingErrors)
        {
            <div class="panel panel-border-wide alert-default">
                <p class="heading-medium">You can't approve this cohort until: </p>
                <ul class="list list-bullet">
                    @if (!Model.HasSignedTheAgreement)
                    {
                        <li>
                            You've signed an <a href="@Model.SignAgreementUrl" target="_blank">apprenticeship agreement</a> with the Education and Skills Funding Agency
                        </li>
                    }
                    @if (!Model.ReadyForApproval)
                    {
                        <li>
                            All <a href="@Url.Action("Details", new {Model.ProviderId, Model.HashedCommitmentId})">apprentice records</a> are complete
                        </li>
                    }
                    @if (Model.HasOverlappingErrors)
                    {
                        <li>
                            There are no <a href="@Url.Action("Details", new {Model.ProviderId, Model.HashedCommitmentId})">overlapping training dates</a> for your apprentices
                        </li>
                    }
                </ul>
            </div>
        }

        <form action="@Url.Action("FinishEditing")" method="POST">
            @Html.AntiForgeryToken()

            @Html.Partial("ValidationSummary", Html.ViewData.ModelState)
            <h1 class="heading-xlarge">Choose an option</h1>

            <legend class="visuallyhidden">Things to do next</legend>
            <div class="form-error-group form-group @Html.AddClassIfPropertyInError(x => x.SaveStatus, "error")">
                <div>
                    @Html.ValidationMessageFor(m => m.SaveStatus, "Please choose an option", new { id = "error-message-" + Html.IdFor(m => m.SaveStatus) })
                </div>
                @if (Model.ReadyForApproval && Model.HasSignedTheAgreement && !Model.HasOverlappingErrors)
                {
                    if (Model.IsApproveAndSend)
                    {
                        <label class="block-label" for="@RadioButtonId(SaveStatus.ApproveAndSend)">
                            @Html.RadioButtonFor(m => m.SaveStatus, SaveStatus.ApproveAndSend, GetRadioButtonAttributes(SaveStatus.ApproveAndSend, !Model.ReadyForApproval))
                            <span id="changeOne">Approve and send to employer for approval</span>
                        </label>
                    }
                    else
                    {
                        <label class="block-label" for="@RadioButtonId(SaveStatus.Approve)">
                            @Html.RadioButtonFor(m => m.SaveStatus, SaveStatus.Approve, GetRadioButtonAttributes(SaveStatus.Approve, !Model.ReadyForApproval))
                            <span id="changeOne">Approve</span>
                        </label>
                    }
                }

                <label class="block-label" for="@RadioButtonId(SaveStatus.AmendAndSend)">
                    @Html.RadioButtonFor(m => m.SaveStatus, SaveStatus.AmendAndSend, GetRadioButtonAttributes(SaveStatus.AmendAndSend, false))
                    <span id="changeTwo">Send to employer to review or add details</span>
                </label>

                <label class="block-label" for="@RadioButtonId(SaveStatus.Save)">
                    @Html.RadioButtonFor(m => m.SaveStatus, SaveStatus.Save, GetRadioButtonAttributes(SaveStatus.Save, false))
                    <span id="changeThree">Save but don’t send to employer</span>
                </label>
            </div>

            <div>
                <input type="submit" class="button" id="paymentPlan" value="Continue"/>
            </div>
            @Html.HiddenFor(m => m.ProviderId)
            @Html.HiddenFor(m => m.HashedCommitmentId)

            @Html.HiddenFor(m => m.HasApprenticeships)
            @Html.HiddenFor(m => m.InvalidApprenticeshipCount)
            @Html.HiddenFor(m => m.ReadyForApproval)
            @Html.HiddenFor(m => m.HasSignedTheAgreement)
        </form>



    </div>

    <div class="column-one-third">

    </div>
</div>

@functions
{
    public string RadioButtonId(SaveStatus status)
    {
        return $"{Html.IdFor(m => m.SaveStatus)}-{status}";
    }

    public Dictionary<string, object> GetRadioButtonAttributes(SaveStatus status, bool disabled)
    {
        var htmlAttributes = new Dictionary<string, object>
        {
            { "id",  RadioButtonId(status) }
        };

        if (disabled)
            htmlAttributes.Add("disabled", "disabled");

        return htmlAttributes;
    }

    public string GetInvalidStateForApprovalMessage(bool hasApprenticeships, int invalidApprentieshipCount)
    {
        if (!hasApprenticeships)
            return "You need to add details for at least one apprentice before you can approve this cohort - " 
                + Html.ActionLink("add an apprentice", "Details", new { Model.ProviderId, Model.HashedCommitmentId });

        var emptyLink = Html.ActionLink("go back and add details", "Details", new { Model.ProviderId, Model.HashedCommitmentId });

        return invalidApprentieshipCount == 1
            ? "You have 1 apprentice with incomplete details. All apprentice details must be complete before you can approve this cohort - " + emptyLink
            : $"You have {invalidApprentieshipCount} apprentices with incomplete details. All apprentice details must be complete before you can approve this cohort - " + emptyLink;
    }
}


@section breadcrumb {
    <div class="breadcrumbs">
        <a href="@Url.Action("Details", new { Model.HashedCommitmentId })" aria-label="Back" class="back-link">Back</a>
    </div>
}
