@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models.DataLock
@model ApprenticeshipDetailsViewModel

@{
    ViewBag.Title = "Apprentice detail";
    ViewBag.PageId = "apprentices-detail";
}

<div class="grid-row list-apprentice">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">@Model.FirstName @Model.LastName</h1>
        
        @if (Model.PendingChanges == PendingChanges.ReadyForApproval)
            {
            <div class="purple-border">
                <p>There are changes to this apprentice's details that you need to review.</p>
                <a href="@Url.RouteUrl("ReviewApprovedApprenticeChange")" aria-label="Review changes" class="">Review changes</a>
            </div>
        }
        else if (Model.PendingChanges == PendingChanges.WaitingForEmployer)
        {
            <div class="purple-border">
                <p>
                    There are changes to this apprentice's details that are waiting for approval by the employer.
                </p>
                <a href="@Url.RouteUrl("UndoApprovedApprenticeChange")" aria-label="View changes" class="">View changes</a>                
            </div>
        }

        @if (Model.DataLockSummaryViewModel.DataLockWithCourseMismatch.Any(x => x.TriageStatusViewModel == TriageStatusViewModel.RestartApprenticeship))
        {
            <div class="panel panel-border-wide">
                <h3>
                    Changes requested
                </h3>
                <p>
                    You've sent an automated message to the employer asking them to stop 
                    this apprentice and create a new record for them.
                </p>
            </div>
        }
        
        @if (Model.DataLockSummaryViewModel.DataLockWithOnlyPriceMismatch.Any(x => x.TriageStatusViewModel == TriageStatusViewModel.ChangeApprenticeship))
        {
            <div class="panel panel-border-wide">
                <h3>
                    Changes pending
                </h3>
                <p>
                    There are changes to this apprentice's details that are waiting for approval by the employer. You can continue to edit this apprentice if you need to.
                </p>
            </div>
        }

        <div class="panel panel-border-wide">
                <h3>
                    ILR data mismatch
                </h3>
                <p>
                    The apprentice's details are different in your organisation's ILR submission.
                    This may result in a payment failure.
                </p>
                    
                @{
                    var courses = Model.DataLockSummaryViewModel.DataLockWithCourseMismatch.Any(x => x.TriageStatusViewModel == TriageStatusViewModel.Unknown);
                    var prices = Model.DataLockSummaryViewModel.DataLockWithOnlyPriceMismatch.Any(x => x.TriageStatusViewModel == TriageStatusViewModel.Unknown);

                    if (courses && prices)
                    {
                        <a href="@Url.RouteUrl("UpdateDataLock")" aria-label="View details" class="">View price mismatch</a>
                        <br/>
                        <a href="@Url.RouteUrl("RequestRestart")" aria-label="View details" class="">View course mismatch</a>
                    }
                    else
                    {
                        if (courses)
                        {
                            <a href="@Url.RouteUrl("RequestRestart")" aria-label="View details" class="">View details</a>
                        }
                        else if (prices)
                        {
                            <a href="@Url.RouteUrl("UpdateDataLock")" aria-label="View details" class="">View details</a>
                        }
                    }
                }
            </div>
                

                <table id="app-status">
                    <thead>
                        <tr>
                            <th colspan="2">Apprentice Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Status</td>
                            <td>@Model.Status</td>
                        </tr>
                    </tbody>
                </table>

                <table id="overview-section">
                    <thead>
                        <tr>
                            <th colspan="2">Overview</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Employer</td>
                            <td>@Model.EmployerName</td>
                        </tr>
                        <tr>
                            <td>Cohort reference</td>
                            <td>@Model.CohortReference</td>
                        </tr>
                    </tbody>
                </table>

                <table id="apprentice-section">
                    <thead>
                        <tr>
                            <th colspan="2">
                                Apprentice
                                @if (Model.EnableEdit)
                                {
                                    <a href="@Url.RouteUrl("EditApprovedApprentice")" class="float-right">Edit apprentice</a>
                                }
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Name</td>
                            <td>@Model.FirstName @Model.LastName</td>
                        </tr>
                        <tr>
                            <td>Unique learner number</td>
                            <td>@Model.Uln</td>
                        </tr>
                        <tr>
                            <td>Date of birth</td>
                            <td>
                                @if (Model.DateOfBirth.HasValue)
                                {
                                    @Model.DateOfBirth.Value.ToGdsFormat()
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Apprenticeship training course</td>
                            <td>@Model.TrainingName</td>
                        </tr>

                        <tr>
                            <td>Training start date</td>
                            <td>
                                @if (Model.StartDate.HasValue)
                                {
                                    @Model.StartDate.Value.ToGdsFormat()
                                }
                            </td>

                        </tr>
                        <tr>
                            <td>Training end date</td>
                            <td>
                                @if (Model.EndDate.HasValue)
                    {
                                    @Model.EndDate.Value.ToGdsFormat()
                                }
                            </td>

                        </tr>
                        <tr>
                            <td>Total cost of training </td>
                            <td>@FormatCost(Model.Cost) </td>
                        </tr>
                        <tr>
                            <td>Reference </td>
                            <td>@Model.ProviderReference</td>
                        </tr>

                    </tbody>
                </table>

            </div>
    <div class="column-one-third">
        <!--
            enhancement
        <h2 class="heading-medium">Change history</h2>
        <p>There have been no changes.</p>
        -->
    </div>
</div>

@section breadcrumb {
    <div class="breadcrumbs">
        <a href="@Url.Action("Index", "ManageApprentices")" aria-label="Back to your apprentices" class="back-link">Back to your apprentices</a>
    </div>
}

@functions {
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }
}