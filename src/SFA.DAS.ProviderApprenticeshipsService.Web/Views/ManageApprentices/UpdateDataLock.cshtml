@using SFA.DAS.ProviderApprenticeshipsService.Web.Extensions
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models.DataLock
@using SFA.DAS.ProviderApprenticeshipsService.Web.Models.Types
@model SFA.DAS.ProviderApprenticeshipsService.Web.Models.DataLock.DataLockMismatchViewModel

@{
    ViewBag.Title = "Apprenticeship data mismatch";
    ViewBag.PageID = "datalock-details-change";
}

<div class="grid-row">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">Details of ILR data mismatch</h1>

        <p>Details for this apprentice are different in your organisation's ILR submission. </p>


        <table class="edited-changes">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Period</th>
                    <th scope="col">Apprenticeship service</th>
                    <th scope="col">ILR submission</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.DataLockViewModel.IlrTotalCost != Model.DasApprenticeship.Cost)
                {
                    <tr>
                        <td>Total cost of training</td>
                        <td>@Model.OriginalApprenticeship.Cost.FormatCost() </td>
                        <td class="changed-item">@Model.Cost.AsNullableDecimal().FormatCost()</td>
                        @Html.Hidden("Cost", Model.Cost)
                    </tr>
                }

                @if (Model.StartDate?.DateTime != null)
                {
                    <tr>
                        <td>Planned training start date</td>
                        <td>@Model.OriginalApprenticeship.StartDate.Value.ToGdsFormat() </td>
                        <td class="changed-item">@Model.StartDate.DateTime.Value.ToGdsFormat()</td>
                        @Html.Hidden("StartDate.Month", Model.StartDate.Month)
                        @Html.Hidden("StartDate.Year", Model.StartDate.Year)
                    </tr>
                }

                @if (Model.EndDate?.DateTime != null)
                {
                    <tr>
                        <td>Planned training end date</td>
                        <td>@Model.OriginalApprenticeship.EndDate.Value.ToGdsFormat() </td>
                        <td class="changed-item">@Model.EndDate.DateTime.Value.ToGdsFormat()</td>
                        @Html.Hidden("EndDate.Month", Model.EndDate.Month)
                        @Html.Hidden("EndDate.Year", Model.EndDate.Year)
                    </tr>
                }

                

            </tbody>
        </table>


        <table>
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Period</th>
                    <th scope="col">Apprenticeship service</th>
                    <th scope="col">ILR submission</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total cost of training</td>
                    <td>4th May 2017 to 19th May 2018</td>
                    <td>&pound;6,555</td>
                    <td>&pound;7,000</td>
                </tr>
                <tr>
                    <td>Planned training start date</td>
                    <td>--</td>
                    <td>August 2017</td>
                    <td>July 2017</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="grid-row">
    <div class="column-two-thirds">
        <form method="POST" action="@Url.Action("FixMismatch")" novalidate="novalidate">
            @Html.Partial("ValidationSummary", Html.ViewData.ModelState)
            @Html.AntiForgeryToken()
            <div class="form-group @Html.AddClassIfPropertyInError(x => x.SubmitStatus, "error") ">
                <fieldset>
                    <h2 class="heading-medium">How do you want to fix the mismatch?</h2>
                    <legend class="visually-hidden">How do you want to fix the mismatch?</legend>
                    <div class="form-group">
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SubmitStatus.UpdateDataInDas)">
                            @Html.RadioButtonFor(m => m.SubmitStatus, SubmitStatus.UpdateDataInDas, new { id = RadioButtonId(SubmitStatus.UpdateDataInDas) })
                            <span>Start to update the details in the apprenticeship service</span>
                        </label>
                        
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SubmitStatus.UpdateDataInIlr)">
                            @Html.RadioButtonFor(m => m.SubmitStatus, SubmitStatus.UpdateDataInIlr, new { id = RadioButtonId(SubmitStatus.UpdateDataInIlr) })
                            <span>Update the details through the ILR instead</span>
                        </label>
                        
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SubmitStatus.None)">
                            @Html.RadioButtonFor(m => m.SubmitStatus, SubmitStatus.None, new { id = RadioButtonId(SubmitStatus.None) })
                            <span>Leave for now</span>
                        </label>
                    </div>
                    <input type="submit" class="button" id="fix-mismatch" value="Continue" />
                </fieldset>
            </div>
        </form>
    </div>
</div>


@functions
{

    public string RadioButtonId(SubmitStatus status)
    {
        return $"{Html.IdFor(m => m.SubmitStatus)}-{status}";
    }

}